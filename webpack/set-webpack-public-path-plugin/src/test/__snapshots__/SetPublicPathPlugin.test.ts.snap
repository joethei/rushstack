// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles amd library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
define(\\"MyLibrary\\", [], () => { return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles amd library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles amd library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles amd library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
define(\\"MyLibrary\\", [], () => { return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles amd library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles amd library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles amd library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
define(\\"MyLibrary\\", [], () => { return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles amd library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles amd library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles amd library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
define(\\"MyLibrary\\", [], () => { return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles amd library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles amd library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles amd library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "define(\\"MyLibrary\\",[],(()=>(console.log(\\"Hello world!\\"),{})));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles amd library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles amd library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles amd library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "define(\\"MyLibrary\\",[],(()=>{return e={},(()=>{var r,t=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(t&&t.length)for(var i=0;i<t.length;i++)if(t[i]){var n=t[i].getAttribute(\\"src\\");if(n&&n.match(a)){r=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=r})(),console.log(e.p),{};var e}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles amd library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles amd library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles amd library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_deed8afe870a5fe703ae.js": "define(\\"MyLibrary\\",[],(()=>(console.log(\\"Hello world!\\"),{})));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles amd library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles amd library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles amd library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_a96c22591ae020f988e2.js": "define(\\"MyLibrary\\",[],(()=>{return e={},(()=>{var a,r=document.getElementsByTagName(\\"script\\"),t=/main_a96c22591ae020f988e2\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var n=r[i].getAttribute(\\"src\\");if(n&&n.match(t)){a=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=a})(),console.log(e.p),{};var e}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles amd library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles amd library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var t={};(()=>{var e,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var n=r[i].getAttribute(\\"src\\");if(n&&n.match(a)){e=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}t.p=e})(),console.log(t.p),MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_edcf84f77954338454ea.js": "console.log(\\"Hello world!\\"),MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_0926637b4ac11d8978ba.js": "(()=>{var a={};(()=>{var t,e=document.getElementsByTagName(\\"script\\"),r=/main_0926637b4ac11d8978ba\\\\.js/i;if(e&&e.length)for(var i=0;i<e.length;i++)if(e[i]){var n=e[i].getAttribute(\\"src\\");if(n&&n.match(r)){t=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}a.p=t})(),console.log(a.p),MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign-properties library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	var __webpack_export_target__ = (MyLibrary = typeof MyLibrary === \\"undefined\\" ? {} : MyLibrary);
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign-properties library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign-properties library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign-properties library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	var __webpack_export_target__ = (MyLibrary = typeof MyLibrary === \\"undefined\\" ? {} : MyLibrary);
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign-properties library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign-properties library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign-properties library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	var __webpack_export_target__ = (MyLibrary = typeof MyLibrary === \\"undefined\\" ? {} : MyLibrary);
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign-properties library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign-properties library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign-properties library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	var __webpack_export_target__ = (MyLibrary = typeof MyLibrary === \\"undefined\\" ? {} : MyLibrary);
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign-properties library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign-properties library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign-properties library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};console.log(\\"Hello world!\\");var r=MyLibrary=\\"undefined\\"==typeof MyLibrary?{}:MyLibrary;for(var o in e)r[o]=e[o];e.__esModule&&Object.defineProperty(r,\\"__esModule\\",{value:!0})})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign-properties library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign-properties library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign-properties library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};(()=>{var r,a=document.getElementsByTagName(\\"script\\"),t=/main\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var n=a[i].getAttribute(\\"src\\");if(n&&n.match(t)){r=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=r})();var r={};console.log(e.p);var a=MyLibrary=\\"undefined\\"==typeof MyLibrary?{}:MyLibrary;for(var t in r)a[t]=r[t];r.__esModule&&Object.defineProperty(a,\\"__esModule\\",{value:!0})})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign-properties library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign-properties library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign-properties library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_c46fa6e9dce17d2b90d4.js": "(()=>{var e={};console.log(\\"Hello world!\\");var r=MyLibrary=\\"undefined\\"==typeof MyLibrary?{}:MyLibrary;for(var o in e)r[o]=e[o];e.__esModule&&Object.defineProperty(r,\\"__esModule\\",{value:!0})})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign-properties library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign-properties library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign-properties library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_0a683184f3afcbf97c6c.js": "(()=>{var e={};(()=>{var r,a=document.getElementsByTagName(\\"script\\"),t=/main_0a683184f3afcbf97c6c\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var n=a[i].getAttribute(\\"src\\");if(n&&n.match(t)){r=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=r})();var r={};console.log(e.p);var a=MyLibrary=\\"undefined\\"==typeof MyLibrary?{}:MyLibrary;for(var t in r)a[t]=r[t];r.__esModule&&Object.defineProperty(a,\\"__esModule\\",{value:!0})})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign-properties library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles assign-properties library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),exports.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var t={};(()=>{var e,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){e=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}t.p=e})(),console.log(t.p),exports.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_a61d0ddd7fbc122d026c.js": "console.log(\\"Hello world!\\"),exports.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_be77d75ccbe921238d90.js": "(()=>{var a={};(()=>{var t,e=document.getElementsByTagName(\\"script\\"),r=/main_be77d75ccbe921238d90\\\\.js/i;if(e&&e.length)for(var i=0;i<e.length;i++)if(e[i]){var s=e[i].getAttribute(\\"src\\");if(s&&s.match(r)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}a.p=t})(),console.log(a.p),exports.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-module library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-module library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-module library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-module library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-module library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-module library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-module library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-module library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-module library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-module library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-module library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-module library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-module library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),module.exports.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-module library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-module library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-module library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};(()=>{var t,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),module.exports.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-module library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-module library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-module library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_4618d8f04314a0c07b24.js": "console.log(\\"Hello world!\\"),module.exports.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-module library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-module library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-module library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_215ebada3ff1a04863f1.js": "(()=>{var e={};(()=>{var t,r=document.getElementsByTagName(\\"script\\"),a=/main_215ebada3ff1a04863f1\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),module.exports.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-module library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-module library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-static library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	Object.defineProperty((exports.MyLibrary = exports.MyLibrary || {}), \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-static library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-static library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-static library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	Object.defineProperty((exports.MyLibrary = exports.MyLibrary || {}), \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-static library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-static library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-static library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	Object.defineProperty((exports.MyLibrary = exports.MyLibrary || {}), \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-static library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-static library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-static library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	Object.defineProperty((exports.MyLibrary = exports.MyLibrary || {}), \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-static library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-static library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-static library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),Object.defineProperty(exports.MyLibrary=exports.MyLibrary||{},\\"__esModule\\",{value:!0});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-static library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-static library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-static library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};(()=>{var r,t=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(t&&t.length)for(var i=0;i<t.length;i++)if(t[i]){var s=t[i].getAttribute(\\"src\\");if(s&&s.match(a)){r=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=r})(),console.log(e.p),Object.defineProperty(exports.MyLibrary=exports.MyLibrary||{},\\"__esModule\\",{value:!0})})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-static library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-static library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-static library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_fdc7b1aa4223e178b616.js": "console.log(\\"Hello world!\\"),Object.defineProperty(exports.MyLibrary=exports.MyLibrary||{},\\"__esModule\\",{value:!0});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-static library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-static library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-static library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_7f615e94560b668d69b0.js": "(()=>{var e={};(()=>{var r,a=document.getElementsByTagName(\\"script\\"),t=/main_7f615e94560b668d69b0\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var s=a[i].getAttribute(\\"src\\");if(s&&s.match(t)){r=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=r})(),console.log(e.p),Object.defineProperty(exports.MyLibrary=exports.MyLibrary||{},\\"__esModule\\",{value:!0})})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-static library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs-static library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs2 library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs2 library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs2 library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs2 library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs2 library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs2 library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs2 library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs2 library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs2 library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs2 library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs2 library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs2 library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs2 library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),module.exports.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs2 library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs2 library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs2 library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};(()=>{var t,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),module.exports.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs2 library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs2 library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs2 library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_4618d8f04314a0c07b24.js": "console.log(\\"Hello world!\\"),module.exports.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs2 library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs2 library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs2 library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_215ebada3ff1a04863f1.js": "(()=>{var e={};(()=>{var t,r=document.getElementsByTagName(\\"script\\"),a=/main_215ebada3ff1a04863f1\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),module.exports.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs2 library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles commonjs2 library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles global library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles global library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles global library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles global library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles global library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles global library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles global library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles global library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles global library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles global library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles global library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles global library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles global library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),self.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles global library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles global library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles global library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};(()=>{var t,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),self.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles global library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles global library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles global library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_7d39ca5328225a0694e5.js": "console.log(\\"Hello world!\\"),self.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles global library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles global library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles global library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_8cd12c1b85d952bb65f6.js": "(()=>{var e={};(()=>{var t,a=document.getElementsByTagName(\\"script\\"),r=/main_8cd12c1b85d952bb65f6\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var s=a[i].getAttribute(\\"src\\");if(s&&s.match(r)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),self.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles global library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles global library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles jsonp library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
MyLibrary(/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
);",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles jsonp library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles jsonp library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles jsonp library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
MyLibrary(/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
);",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles jsonp library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles jsonp library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles jsonp library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
MyLibrary(/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
);",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles jsonp library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles jsonp library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles jsonp library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
MyLibrary(/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
);",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles jsonp library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles jsonp library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles jsonp library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "MyLibrary((console.log(\\"Hello world!\\"),{}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles jsonp library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles jsonp library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles jsonp library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "MyLibrary((()=>{var r={};return(()=>{var t,e=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(e&&e.length)for(var i=0;i<e.length;i++)if(e[i]){var n=e[i].getAttribute(\\"src\\");if(n&&n.match(a)){t=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}r.p=t})(),console.log(r.p),{}})());",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles jsonp library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles jsonp library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles jsonp library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_f119a2e1669e0baf47d0.js": "MyLibrary((console.log(\\"Hello world!\\"),{}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles jsonp library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles jsonp library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles jsonp library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_d62c4a558867b9317512.js": "MyLibrary((()=>{var r={};return(()=>{var t,a=document.getElementsByTagName(\\"script\\"),e=/main_d62c4a558867b9317512\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var n=a[i].getAttribute(\\"src\\");if(n&&n.match(e)){t=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}r.p=t})(),console.log(r.p),{}})());",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles jsonp library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles jsonp library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles self library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles self library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles self library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles self library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles self library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles self library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles self library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles self library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles self library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles self library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles self library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles self library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles self library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),self.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles self library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles self library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles self library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};(()=>{var t,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),self.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles self library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles self library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles self library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_7d39ca5328225a0694e5.js": "console.log(\\"Hello world!\\"),self.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles self library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles self library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles self library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_8cd12c1b85d952bb65f6.js": "(()=>{var e={};(()=>{var t,a=document.getElementsByTagName(\\"script\\"),r=/main_8cd12c1b85d952bb65f6\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var s=a[i].getAttribute(\\"src\\");if(s&&s.match(r)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),self.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles self library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles self library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles system library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
System.register(\\"MyLibrary\\", [], function(__WEBPACK_DYNAMIC_EXPORT__, __system_context__) {


	return {

		execute: function() {
			__WEBPACK_DYNAMIC_EXPORT__(
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()

			);
		}
	};
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles system library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles system library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles system library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
System.register(\\"MyLibrary\\", [], function(__WEBPACK_DYNAMIC_EXPORT__, __system_context__) {


	return {

		execute: function() {
			__WEBPACK_DYNAMIC_EXPORT__(
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()

			);
		}
	};
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles system library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles system library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles system library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
System.register(\\"MyLibrary\\", [], function(__WEBPACK_DYNAMIC_EXPORT__, __system_context__) {


	return {

		execute: function() {
			__WEBPACK_DYNAMIC_EXPORT__(
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()

			);
		}
	};
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles system library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles system library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles system library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
System.register(\\"MyLibrary\\", [], function(__WEBPACK_DYNAMIC_EXPORT__, __system_context__) {


	return {

		execute: function() {
			__WEBPACK_DYNAMIC_EXPORT__(
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()

			);
		}
	};
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles system library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles system library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles system library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "System.register(\\"MyLibrary\\",[],(function(e,o){return{execute:function(){e((console.log(\\"Hello world!\\"),{}))}}}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles system library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles system library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles system library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "System.register(\\"MyLibrary\\",[],(function(e,t){return{execute:function(){var t;e((t={},(()=>{var e,r=document.getElementsByTagName(\\"script\\"),n=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var a=r[i].getAttribute(\\"src\\");if(a&&a.match(n)){e=a.substring(0,a.lastIndexOf(\\"/\\")+1);break}}t.p=e})(),console.log(t.p),{}))}}}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles system library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles system library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles system library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_7d81fbd36473e27aa0fb.js": "System.register(\\"MyLibrary\\",[],(function(e,o){return{execute:function(){e((console.log(\\"Hello world!\\"),{}))}}}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles system library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles system library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles system library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_b258ae75091c8f8b8490.js": "System.register(\\"MyLibrary\\",[],(function(e,t){return{execute:function(){var t;e((t={},(()=>{var e,r=document.getElementsByTagName(\\"script\\"),a=/main_b258ae75091c8f8b8490\\\\.js/i;if(r&&r.length)for(var n=0;n<r.length;n++)if(r[n]){var i=r[n].getAttribute(\\"src\\");if(i&&i.match(a)){e=i.substring(0,i.lastIndexOf(\\"/\\")+1);break}}t.p=e})(),console.log(t.p),{}))}}}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles system library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles system library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles this library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	this.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles this library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles this library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles this library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	this.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles this library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles this library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles this library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	this.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles this library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles this library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles this library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	this.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles this library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles this library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles this library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{console.log(\\"Hello world!\\"),this.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles this library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles this library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles this library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var t={};(()=>{var e,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){e=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}t.p=e})(),console.log(t.p),this.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles this library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles this library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles this library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_4d6fb5abdd3eb7fe4115.js": "(()=>{console.log(\\"Hello world!\\"),this.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles this library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles this library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles this library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_db75e39898539074e63f.js": "(()=>{var e={};(()=>{var t,a=document.getElementsByTagName(\\"script\\"),r=/main_db75e39898539074e63f\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var s=a[i].getAttribute(\\"src\\");if(s&&s.match(r)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),this.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles this library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles this library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "!function(e,o){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=o():\\"function\\"==typeof define&&define.amd?define([],o):\\"object\\"==typeof exports?exports.MyLibrary=o():e.MyLibrary=o()}(self,(()=>(console.log(\\"Hello world!\\"),{})));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "!function(e,t){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=t():\\"function\\"==typeof define&&define.amd?define([],t):\\"object\\"==typeof exports?exports.MyLibrary=t():e.MyLibrary=t()}(self,(()=>{return e={},(()=>{var t,o=document.getElementsByTagName(\\"script\\"),r=/main\\\\.js/i;if(o&&o.length)for(var n=0;n<o.length;n++)if(o[n]){var f=o[n].getAttribute(\\"src\\");if(f&&f.match(r)){t=f.substring(0,f.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),{};var e}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_8c43c348dc21118df193.js": "!function(e,o){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=o():\\"function\\"==typeof define&&define.amd?define([],o):\\"object\\"==typeof exports?exports.MyLibrary=o():e.MyLibrary=o()}(self,(()=>(console.log(\\"Hello world!\\"),{})));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_cf828947bceb5d39f0a1.js": "!function(e,t){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=t():\\"function\\"==typeof define&&define.amd?define([],t):\\"object\\"==typeof exports?exports.MyLibrary=t():e.MyLibrary=t()}(self,(()=>{return e={},(()=>{var t,o=document.getElementsByTagName(\\"script\\"),r=/main_cf828947bceb5d39f0a1\\\\.js/i;if(o&&o.length)for(var f=0;f<o.length;f++)if(o[f]){var n=o[f].getAttribute(\\"src\\");if(n&&n.match(r)){t=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),{};var e}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd2 library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd2 library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd2 library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd2 library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd2 library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd2 library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd2 library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd2 library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd2 library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd2 library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd2 library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd2 library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd2 library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "!function(e,o){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=o():\\"function\\"==typeof define&&define.amd?define([],o):\\"object\\"==typeof exports?exports.MyLibrary=o():e.MyLibrary=o()}(self,(()=>(console.log(\\"Hello world!\\"),{})));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd2 library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd2 library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd2 library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "!function(e,t){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=t():\\"function\\"==typeof define&&define.amd?define([],t):\\"object\\"==typeof exports?exports.MyLibrary=t():e.MyLibrary=t()}(self,(()=>{return e={},(()=>{var t,o=document.getElementsByTagName(\\"script\\"),r=/main\\\\.js/i;if(o&&o.length)for(var n=0;n<o.length;n++)if(o[n]){var f=o[n].getAttribute(\\"src\\");if(f&&f.match(r)){t=f.substring(0,f.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),{};var e}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd2 library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd2 library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd2 library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_8c43c348dc21118df193.js": "!function(e,o){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=o():\\"function\\"==typeof define&&define.amd?define([],o):\\"object\\"==typeof exports?exports.MyLibrary=o():e.MyLibrary=o()}(self,(()=>(console.log(\\"Hello world!\\"),{})));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd2 library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd2 library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd2 library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_cf828947bceb5d39f0a1.js": "!function(e,t){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=t():\\"function\\"==typeof define&&define.amd?define([],t):\\"object\\"==typeof exports?exports.MyLibrary=t():e.MyLibrary=t()}(self,(()=>{return e={},(()=>{var t,o=document.getElementsByTagName(\\"script\\"),r=/main_cf828947bceb5d39f0a1\\\\.js/i;if(o&&o.length)for(var f=0;f<o.length;f++)if(o[f]){var n=o[f].getAttribute(\\"src\\");if(n&&n.match(r)){t=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),{};var e}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd2 library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles umd2 library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles var library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
var MyLibrary;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles var library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles var library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles var library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
var MyLibrary;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles var library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles var library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles var library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
var MyLibrary;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles var library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles var library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles var library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
var MyLibrary;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles var library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles var library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles var library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "var MyLibrary;console.log(\\"Hello world!\\"),MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles var library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles var library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles var library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "var MyLibrary;(()=>{var r={};(()=>{var a,t=document.getElementsByTagName(\\"script\\"),e=/main\\\\.js/i;if(t&&t.length)for(var i=0;i<t.length;i++)if(t[i]){var n=t[i].getAttribute(\\"src\\");if(n&&n.match(e)){a=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}r.p=a})(),console.log(r.p),MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles var library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles var library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles var library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_cdf966d89dde9e0e6511.js": "var MyLibrary;console.log(\\"Hello world!\\"),MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles var library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles var library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles var library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_6a43fdec20033b6103e3.js": "var MyLibrary;(()=>{var a={};(()=>{var r,e=document.getElementsByTagName(\\"script\\"),t=/main_6a43fdec20033b6103e3\\\\.js/i;if(e&&e.length)for(var i=0;i<e.length;i++)if(e[i]){var n=e[i].getAttribute(\\"src\\");if(n&&n.match(t)){r=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}a.p=r})(),console.log(a.p),MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles var library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles var library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles window library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	window.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles window library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles window library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles window library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	window.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles window library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles window library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles window library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	window.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles window library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles window library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles window library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	window.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles window library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles window library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles window library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),window.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles window library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles window library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles window library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var t={};(()=>{var e,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var n=r[i].getAttribute(\\"src\\");if(n&&n.match(a)){e=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}t.p=e})(),console.log(t.p),window.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles window library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles window library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles window library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_5e7a9248e729d9296340.js": "console.log(\\"Hello world!\\"),window.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles window library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles window library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles window library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_45661b5c41db58a7c856.js": "(()=>{var e={};(()=>{var a,t=document.getElementsByTagName(\\"script\\"),r=/main_45661b5c41db58a7c856\\\\.js/i;if(t&&t.length)for(var i=0;i<t.length;i++)if(t[i]){var n=t[i].getAttribute(\\"src\\");if(n&&n.match(r)){a=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=a})(),console.log(e.p),window.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles window library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"[name]_[hash].js","isTokenized":true}}}) Handles window library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles amd library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
define(\\"MyLibrary\\", [], () => { return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles amd library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles amd library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles amd library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
define(\\"MyLibrary\\", [], () => { return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles amd library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles amd library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles amd library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
define(\\"MyLibrary\\", [], () => { return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles amd library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles amd library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles amd library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
define(\\"MyLibrary\\", [], () => { return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles amd library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles amd library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles amd library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "define(\\"MyLibrary\\",[],(()=>(console.log(\\"Hello world!\\"),{})));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles amd library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles amd library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles amd library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "define(\\"MyLibrary\\",[],(()=>{return e={},(()=>{var r,t=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(t&&t.length)for(var i=0;i<t.length;i++)if(t[i]){var n=t[i].getAttribute(\\"src\\");if(n&&n.match(a)){r=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=r})(),console.log(e.p),{};var e}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles amd library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles amd library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles amd library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_deed8afe870a5fe703ae.js": "define(\\"MyLibrary\\",[],(()=>(console.log(\\"Hello world!\\"),{})));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles amd library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles amd library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles amd library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_a96c22591ae020f988e2.js": "define(\\"MyLibrary\\",[],(()=>{return e={},(()=>{var a,r=document.getElementsByTagName(\\"script\\"),t=/main_a96c22591ae020f988e2\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var n=r[i].getAttribute(\\"src\\");if(n&&n.match(t)){a=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=a})(),console.log(e.p),{};var e}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles amd library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles amd library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var t={};(()=>{var e,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var n=r[i].getAttribute(\\"src\\");if(n&&n.match(a)){e=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}t.p=e})(),console.log(t.p),MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_edcf84f77954338454ea.js": "console.log(\\"Hello world!\\"),MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_0926637b4ac11d8978ba.js": "(()=>{var a={};(()=>{var t,e=document.getElementsByTagName(\\"script\\"),r=/main_0926637b4ac11d8978ba\\\\.js/i;if(e&&e.length)for(var i=0;i<e.length;i++)if(e[i]){var n=e[i].getAttribute(\\"src\\");if(n&&n.match(r)){t=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}a.p=t})(),console.log(a.p),MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign-properties library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	var __webpack_export_target__ = (MyLibrary = typeof MyLibrary === \\"undefined\\" ? {} : MyLibrary);
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign-properties library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign-properties library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign-properties library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	var __webpack_export_target__ = (MyLibrary = typeof MyLibrary === \\"undefined\\" ? {} : MyLibrary);
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign-properties library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign-properties library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign-properties library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	var __webpack_export_target__ = (MyLibrary = typeof MyLibrary === \\"undefined\\" ? {} : MyLibrary);
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign-properties library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign-properties library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign-properties library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	var __webpack_export_target__ = (MyLibrary = typeof MyLibrary === \\"undefined\\" ? {} : MyLibrary);
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign-properties library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign-properties library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign-properties library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};console.log(\\"Hello world!\\");var r=MyLibrary=\\"undefined\\"==typeof MyLibrary?{}:MyLibrary;for(var o in e)r[o]=e[o];e.__esModule&&Object.defineProperty(r,\\"__esModule\\",{value:!0})})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign-properties library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign-properties library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign-properties library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};(()=>{var r,a=document.getElementsByTagName(\\"script\\"),t=/main\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var n=a[i].getAttribute(\\"src\\");if(n&&n.match(t)){r=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=r})();var r={};console.log(e.p);var a=MyLibrary=\\"undefined\\"==typeof MyLibrary?{}:MyLibrary;for(var t in r)a[t]=r[t];r.__esModule&&Object.defineProperty(a,\\"__esModule\\",{value:!0})})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign-properties library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign-properties library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign-properties library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_c46fa6e9dce17d2b90d4.js": "(()=>{var e={};console.log(\\"Hello world!\\");var r=MyLibrary=\\"undefined\\"==typeof MyLibrary?{}:MyLibrary;for(var o in e)r[o]=e[o];e.__esModule&&Object.defineProperty(r,\\"__esModule\\",{value:!0})})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign-properties library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign-properties library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign-properties library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_0a683184f3afcbf97c6c.js": "(()=>{var e={};(()=>{var r,a=document.getElementsByTagName(\\"script\\"),t=/main_0a683184f3afcbf97c6c\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var n=a[i].getAttribute(\\"src\\");if(n&&n.match(t)){r=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=r})();var r={};console.log(e.p);var a=MyLibrary=\\"undefined\\"==typeof MyLibrary?{}:MyLibrary;for(var t in r)a[t]=r[t];r.__esModule&&Object.defineProperty(a,\\"__esModule\\",{value:!0})})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign-properties library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles assign-properties library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),exports.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var t={};(()=>{var e,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){e=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}t.p=e})(),console.log(t.p),exports.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_a61d0ddd7fbc122d026c.js": "console.log(\\"Hello world!\\"),exports.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_be77d75ccbe921238d90.js": "(()=>{var a={};(()=>{var t,e=document.getElementsByTagName(\\"script\\"),r=/main_be77d75ccbe921238d90\\\\.js/i;if(e&&e.length)for(var i=0;i<e.length;i++)if(e[i]){var s=e[i].getAttribute(\\"src\\");if(s&&s.match(r)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}a.p=t})(),console.log(a.p),exports.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-module library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-module library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-module library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-module library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-module library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-module library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-module library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-module library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-module library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-module library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-module library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-module library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-module library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),module.exports.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-module library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-module library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-module library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};(()=>{var t,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),module.exports.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-module library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-module library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-module library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_4618d8f04314a0c07b24.js": "console.log(\\"Hello world!\\"),module.exports.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-module library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-module library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-module library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_215ebada3ff1a04863f1.js": "(()=>{var e={};(()=>{var t,r=document.getElementsByTagName(\\"script\\"),a=/main_215ebada3ff1a04863f1\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),module.exports.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-module library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-module library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-static library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	Object.defineProperty((exports.MyLibrary = exports.MyLibrary || {}), \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-static library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-static library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-static library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	Object.defineProperty((exports.MyLibrary = exports.MyLibrary || {}), \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-static library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-static library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-static library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	Object.defineProperty((exports.MyLibrary = exports.MyLibrary || {}), \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-static library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-static library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-static library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	Object.defineProperty((exports.MyLibrary = exports.MyLibrary || {}), \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-static library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-static library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-static library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),Object.defineProperty(exports.MyLibrary=exports.MyLibrary||{},\\"__esModule\\",{value:!0});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-static library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-static library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-static library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};(()=>{var r,t=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(t&&t.length)for(var i=0;i<t.length;i++)if(t[i]){var s=t[i].getAttribute(\\"src\\");if(s&&s.match(a)){r=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=r})(),console.log(e.p),Object.defineProperty(exports.MyLibrary=exports.MyLibrary||{},\\"__esModule\\",{value:!0})})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-static library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-static library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-static library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_fdc7b1aa4223e178b616.js": "console.log(\\"Hello world!\\"),Object.defineProperty(exports.MyLibrary=exports.MyLibrary||{},\\"__esModule\\",{value:!0});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-static library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-static library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-static library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_7f615e94560b668d69b0.js": "(()=>{var e={};(()=>{var r,a=document.getElementsByTagName(\\"script\\"),t=/main_7f615e94560b668d69b0\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var s=a[i].getAttribute(\\"src\\");if(s&&s.match(t)){r=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=r})(),console.log(e.p),Object.defineProperty(exports.MyLibrary=exports.MyLibrary||{},\\"__esModule\\",{value:!0})})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-static library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs-static library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs2 library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs2 library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs2 library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs2 library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs2 library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs2 library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs2 library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs2 library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs2 library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs2 library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs2 library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs2 library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs2 library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),module.exports.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs2 library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs2 library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs2 library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};(()=>{var t,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),module.exports.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs2 library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs2 library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs2 library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_4618d8f04314a0c07b24.js": "console.log(\\"Hello world!\\"),module.exports.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs2 library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs2 library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs2 library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_215ebada3ff1a04863f1.js": "(()=>{var e={};(()=>{var t,r=document.getElementsByTagName(\\"script\\"),a=/main_215ebada3ff1a04863f1\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),module.exports.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs2 library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles commonjs2 library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles global library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles global library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles global library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles global library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles global library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles global library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles global library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles global library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles global library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles global library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles global library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles global library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles global library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),self.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles global library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles global library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles global library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};(()=>{var t,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),self.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles global library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles global library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles global library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_7d39ca5328225a0694e5.js": "console.log(\\"Hello world!\\"),self.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles global library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles global library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles global library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_8cd12c1b85d952bb65f6.js": "(()=>{var e={};(()=>{var t,a=document.getElementsByTagName(\\"script\\"),r=/main_8cd12c1b85d952bb65f6\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var s=a[i].getAttribute(\\"src\\");if(s&&s.match(r)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),self.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles global library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles global library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles jsonp library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
MyLibrary(/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
);",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles jsonp library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles jsonp library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles jsonp library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
MyLibrary(/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
);",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles jsonp library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles jsonp library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles jsonp library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
MyLibrary(/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
);",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles jsonp library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles jsonp library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles jsonp library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
MyLibrary(/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
);",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles jsonp library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles jsonp library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles jsonp library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "MyLibrary((console.log(\\"Hello world!\\"),{}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles jsonp library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles jsonp library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles jsonp library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "MyLibrary((()=>{var r={};return(()=>{var t,e=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(e&&e.length)for(var i=0;i<e.length;i++)if(e[i]){var n=e[i].getAttribute(\\"src\\");if(n&&n.match(a)){t=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}r.p=t})(),console.log(r.p),{}})());",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles jsonp library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles jsonp library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles jsonp library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_f119a2e1669e0baf47d0.js": "MyLibrary((console.log(\\"Hello world!\\"),{}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles jsonp library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles jsonp library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles jsonp library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_d62c4a558867b9317512.js": "MyLibrary((()=>{var r={};return(()=>{var t,a=document.getElementsByTagName(\\"script\\"),e=/main_d62c4a558867b9317512\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var n=a[i].getAttribute(\\"src\\");if(n&&n.match(e)){t=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}r.p=t})(),console.log(r.p),{}})());",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles jsonp library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles jsonp library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles self library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles self library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles self library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles self library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles self library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles self library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles self library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles self library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles self library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles self library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles self library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles self library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles self library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),self.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles self library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles self library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles self library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};(()=>{var t,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),self.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles self library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles self library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles self library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_7d39ca5328225a0694e5.js": "console.log(\\"Hello world!\\"),self.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles self library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles self library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles self library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_8cd12c1b85d952bb65f6.js": "(()=>{var e={};(()=>{var t,a=document.getElementsByTagName(\\"script\\"),r=/main_8cd12c1b85d952bb65f6\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var s=a[i].getAttribute(\\"src\\");if(s&&s.match(r)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),self.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles self library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles self library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles system library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
System.register(\\"MyLibrary\\", [], function(__WEBPACK_DYNAMIC_EXPORT__, __system_context__) {


	return {

		execute: function() {
			__WEBPACK_DYNAMIC_EXPORT__(
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()

			);
		}
	};
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles system library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles system library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles system library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
System.register(\\"MyLibrary\\", [], function(__WEBPACK_DYNAMIC_EXPORT__, __system_context__) {


	return {

		execute: function() {
			__WEBPACK_DYNAMIC_EXPORT__(
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()

			);
		}
	};
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles system library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles system library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles system library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
System.register(\\"MyLibrary\\", [], function(__WEBPACK_DYNAMIC_EXPORT__, __system_context__) {


	return {

		execute: function() {
			__WEBPACK_DYNAMIC_EXPORT__(
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()

			);
		}
	};
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles system library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles system library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles system library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
System.register(\\"MyLibrary\\", [], function(__WEBPACK_DYNAMIC_EXPORT__, __system_context__) {


	return {

		execute: function() {
			__WEBPACK_DYNAMIC_EXPORT__(
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()

			);
		}
	};
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles system library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles system library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles system library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "System.register(\\"MyLibrary\\",[],(function(e,o){return{execute:function(){e((console.log(\\"Hello world!\\"),{}))}}}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles system library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles system library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles system library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "System.register(\\"MyLibrary\\",[],(function(e,t){return{execute:function(){var t;e((t={},(()=>{var e,r=document.getElementsByTagName(\\"script\\"),n=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var a=r[i].getAttribute(\\"src\\");if(a&&a.match(n)){e=a.substring(0,a.lastIndexOf(\\"/\\")+1);break}}t.p=e})(),console.log(t.p),{}))}}}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles system library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles system library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles system library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_7d81fbd36473e27aa0fb.js": "System.register(\\"MyLibrary\\",[],(function(e,o){return{execute:function(){e((console.log(\\"Hello world!\\"),{}))}}}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles system library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles system library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles system library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_b258ae75091c8f8b8490.js": "System.register(\\"MyLibrary\\",[],(function(e,t){return{execute:function(){var t;e((t={},(()=>{var e,r=document.getElementsByTagName(\\"script\\"),a=/main_b258ae75091c8f8b8490\\\\.js/i;if(r&&r.length)for(var n=0;n<r.length;n++)if(r[n]){var i=r[n].getAttribute(\\"src\\");if(i&&i.match(a)){e=i.substring(0,i.lastIndexOf(\\"/\\")+1);break}}t.p=e})(),console.log(t.p),{}))}}}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles system library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles system library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles this library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	this.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles this library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles this library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles this library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	this.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles this library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles this library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles this library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	this.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles this library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles this library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles this library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	this.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles this library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles this library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles this library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{console.log(\\"Hello world!\\"),this.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles this library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles this library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles this library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var t={};(()=>{var e,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){e=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}t.p=e})(),console.log(t.p),this.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles this library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles this library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles this library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_4d6fb5abdd3eb7fe4115.js": "(()=>{console.log(\\"Hello world!\\"),this.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles this library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles this library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles this library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_db75e39898539074e63f.js": "(()=>{var e={};(()=>{var t,a=document.getElementsByTagName(\\"script\\"),r=/main_db75e39898539074e63f\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var s=a[i].getAttribute(\\"src\\");if(s&&s.match(r)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),this.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles this library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles this library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "!function(e,o){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=o():\\"function\\"==typeof define&&define.amd?define([],o):\\"object\\"==typeof exports?exports.MyLibrary=o():e.MyLibrary=o()}(self,(()=>(console.log(\\"Hello world!\\"),{})));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "!function(e,t){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=t():\\"function\\"==typeof define&&define.amd?define([],t):\\"object\\"==typeof exports?exports.MyLibrary=t():e.MyLibrary=t()}(self,(()=>{return e={},(()=>{var t,o=document.getElementsByTagName(\\"script\\"),r=/main\\\\.js/i;if(o&&o.length)for(var n=0;n<o.length;n++)if(o[n]){var f=o[n].getAttribute(\\"src\\");if(f&&f.match(r)){t=f.substring(0,f.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),{};var e}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_8c43c348dc21118df193.js": "!function(e,o){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=o():\\"function\\"==typeof define&&define.amd?define([],o):\\"object\\"==typeof exports?exports.MyLibrary=o():e.MyLibrary=o()}(self,(()=>(console.log(\\"Hello world!\\"),{})));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_cf828947bceb5d39f0a1.js": "!function(e,t){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=t():\\"function\\"==typeof define&&define.amd?define([],t):\\"object\\"==typeof exports?exports.MyLibrary=t():e.MyLibrary=t()}(self,(()=>{return e={},(()=>{var t,o=document.getElementsByTagName(\\"script\\"),r=/main_cf828947bceb5d39f0a1\\\\.js/i;if(o&&o.length)for(var f=0;f<o.length;f++)if(o[f]){var n=o[f].getAttribute(\\"src\\");if(n&&n.match(r)){t=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),{};var e}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd2 library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd2 library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd2 library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd2 library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd2 library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd2 library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd2 library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd2 library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd2 library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd2 library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd2 library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd2 library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd2 library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "!function(e,o){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=o():\\"function\\"==typeof define&&define.amd?define([],o):\\"object\\"==typeof exports?exports.MyLibrary=o():e.MyLibrary=o()}(self,(()=>(console.log(\\"Hello world!\\"),{})));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd2 library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd2 library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd2 library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "!function(e,t){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=t():\\"function\\"==typeof define&&define.amd?define([],t):\\"object\\"==typeof exports?exports.MyLibrary=t():e.MyLibrary=t()}(self,(()=>{return e={},(()=>{var t,o=document.getElementsByTagName(\\"script\\"),r=/main\\\\.js/i;if(o&&o.length)for(var n=0;n<o.length;n++)if(o[n]){var f=o[n].getAttribute(\\"src\\");if(f&&f.match(r)){t=f.substring(0,f.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),{};var e}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd2 library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd2 library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd2 library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_8c43c348dc21118df193.js": "!function(e,o){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=o():\\"function\\"==typeof define&&define.amd?define([],o):\\"object\\"==typeof exports?exports.MyLibrary=o():e.MyLibrary=o()}(self,(()=>(console.log(\\"Hello world!\\"),{})));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd2 library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd2 library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd2 library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_cf828947bceb5d39f0a1.js": "!function(e,t){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=t():\\"function\\"==typeof define&&define.amd?define([],t):\\"object\\"==typeof exports?exports.MyLibrary=t():e.MyLibrary=t()}(self,(()=>{return e={},(()=>{var t,o=document.getElementsByTagName(\\"script\\"),r=/main_cf828947bceb5d39f0a1\\\\.js/i;if(o&&o.length)for(var f=0;f<o.length;f++)if(o[f]){var n=o[f].getAttribute(\\"src\\");if(n&&n.match(r)){t=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),{};var e}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd2 library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles umd2 library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles var library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
var MyLibrary;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles var library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles var library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles var library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
var MyLibrary;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles var library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles var library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles var library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
var MyLibrary;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles var library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles var library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles var library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
var MyLibrary;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles var library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles var library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles var library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "var MyLibrary;console.log(\\"Hello world!\\"),MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles var library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles var library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles var library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "var MyLibrary;(()=>{var r={};(()=>{var a,t=document.getElementsByTagName(\\"script\\"),e=/main\\\\.js/i;if(t&&t.length)for(var i=0;i<t.length;i++)if(t[i]){var n=t[i].getAttribute(\\"src\\");if(n&&n.match(e)){a=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}r.p=a})(),console.log(r.p),MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles var library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles var library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles var library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_cdf966d89dde9e0e6511.js": "var MyLibrary;console.log(\\"Hello world!\\"),MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles var library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles var library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles var library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_6a43fdec20033b6103e3.js": "var MyLibrary;(()=>{var a={};(()=>{var r,e=document.getElementsByTagName(\\"script\\"),t=/main_6a43fdec20033b6103e3\\\\.js/i;if(e&&e.length)for(var i=0;i<e.length;i++)if(e[i]){var n=e[i].getAttribute(\\"src\\");if(n&&n.match(t)){r=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}a.p=r})(),console.log(a.p),MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles var library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles var library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles window library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	window.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles window library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles window library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles window library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	window.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles window library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles window library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles window library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	window.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles window library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles window library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles window library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	window.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles window library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles window library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles window library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),window.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles window library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles window library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles window library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var t={};(()=>{var e,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var n=r[i].getAttribute(\\"src\\");if(n&&n.match(a)){e=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}t.p=e})(),console.log(t.p),window.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles window library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles window library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles window library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_5e7a9248e729d9296340.js": "console.log(\\"Hello world!\\"),window.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles window library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles window library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles window library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_45661b5c41db58a7c856.js": "(()=>{var e={};(()=>{var a,t=document.getElementsByTagName(\\"script\\"),r=/main_45661b5c41db58a7c856\\\\.js/i;if(t&&t.length)for(var i=0;i<t.length;i++)if(t[i]){var n=t[i].getAttribute(\\"src\\");if(n&&n.match(r)){a=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=a})(),console.log(e.p),window.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles window library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"name":"foobar.js"}}}) Handles window library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles amd library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
define(\\"MyLibrary\\", [], () => { return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles amd library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles amd library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles amd library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
define(\\"MyLibrary\\", [], () => { return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles amd library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles amd library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles amd library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
define(\\"MyLibrary\\", [], () => { return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles amd library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles amd library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles amd library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
define(\\"MyLibrary\\", [], () => { return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles amd library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles amd library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles amd library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "define(\\"MyLibrary\\",[],(()=>(console.log(\\"Hello world!\\"),{})));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles amd library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles amd library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles amd library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "define(\\"MyLibrary\\",[],(()=>{return e={},(()=>{var r,t=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(t&&t.length)for(var i=0;i<t.length;i++)if(t[i]){var n=t[i].getAttribute(\\"src\\");if(n&&n.match(a)){r=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=r})(),console.log(e.p),{};var e}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles amd library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles amd library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles amd library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_deed8afe870a5fe703ae.js": "define(\\"MyLibrary\\",[],(()=>(console.log(\\"Hello world!\\"),{})));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles amd library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles amd library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles amd library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_a96c22591ae020f988e2.js": "define(\\"MyLibrary\\",[],(()=>{return e={},(()=>{var a,r=document.getElementsByTagName(\\"script\\"),t=/main_a96c22591ae020f988e2\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var n=r[i].getAttribute(\\"src\\");if(n&&n.match(t)){a=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=a})(),console.log(e.p),{};var e}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles amd library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles amd library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var t={};(()=>{var e,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var n=r[i].getAttribute(\\"src\\");if(n&&n.match(a)){e=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}t.p=e})(),console.log(t.p),MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_edcf84f77954338454ea.js": "console.log(\\"Hello world!\\"),MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_0926637b4ac11d8978ba.js": "(()=>{var a={};(()=>{var t,e=document.getElementsByTagName(\\"script\\"),r=/main_0926637b4ac11d8978ba\\\\.js/i;if(e&&e.length)for(var i=0;i<e.length;i++)if(e[i]){var n=e[i].getAttribute(\\"src\\");if(n&&n.match(r)){t=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}a.p=t})(),console.log(a.p),MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign-properties library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	var __webpack_export_target__ = (MyLibrary = typeof MyLibrary === \\"undefined\\" ? {} : MyLibrary);
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign-properties library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign-properties library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign-properties library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	var __webpack_export_target__ = (MyLibrary = typeof MyLibrary === \\"undefined\\" ? {} : MyLibrary);
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign-properties library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign-properties library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign-properties library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	var __webpack_export_target__ = (MyLibrary = typeof MyLibrary === \\"undefined\\" ? {} : MyLibrary);
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign-properties library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign-properties library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign-properties library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	var __webpack_export_target__ = (MyLibrary = typeof MyLibrary === \\"undefined\\" ? {} : MyLibrary);
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign-properties library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign-properties library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign-properties library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};console.log(\\"Hello world!\\");var r=MyLibrary=\\"undefined\\"==typeof MyLibrary?{}:MyLibrary;for(var o in e)r[o]=e[o];e.__esModule&&Object.defineProperty(r,\\"__esModule\\",{value:!0})})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign-properties library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign-properties library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign-properties library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};(()=>{var r,a=document.getElementsByTagName(\\"script\\"),t=/main\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var n=a[i].getAttribute(\\"src\\");if(n&&n.match(t)){r=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=r})();var r={};console.log(e.p);var a=MyLibrary=\\"undefined\\"==typeof MyLibrary?{}:MyLibrary;for(var t in r)a[t]=r[t];r.__esModule&&Object.defineProperty(a,\\"__esModule\\",{value:!0})})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign-properties library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign-properties library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign-properties library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_c46fa6e9dce17d2b90d4.js": "(()=>{var e={};console.log(\\"Hello world!\\");var r=MyLibrary=\\"undefined\\"==typeof MyLibrary?{}:MyLibrary;for(var o in e)r[o]=e[o];e.__esModule&&Object.defineProperty(r,\\"__esModule\\",{value:!0})})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign-properties library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign-properties library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign-properties library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_0a683184f3afcbf97c6c.js": "(()=>{var e={};(()=>{var r,a=document.getElementsByTagName(\\"script\\"),t=/main_0a683184f3afcbf97c6c\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var n=a[i].getAttribute(\\"src\\");if(n&&n.match(t)){r=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=r})();var r={};console.log(e.p);var a=MyLibrary=\\"undefined\\"==typeof MyLibrary?{}:MyLibrary;for(var t in r)a[t]=r[t];r.__esModule&&Object.defineProperty(a,\\"__esModule\\",{value:!0})})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign-properties library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles assign-properties library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),exports.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var t={};(()=>{var e,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){e=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}t.p=e})(),console.log(t.p),exports.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_a61d0ddd7fbc122d026c.js": "console.log(\\"Hello world!\\"),exports.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_be77d75ccbe921238d90.js": "(()=>{var a={};(()=>{var t,e=document.getElementsByTagName(\\"script\\"),r=/main_be77d75ccbe921238d90\\\\.js/i;if(e&&e.length)for(var i=0;i<e.length;i++)if(e[i]){var s=e[i].getAttribute(\\"src\\");if(s&&s.match(r)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}a.p=t})(),console.log(a.p),exports.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-module library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-module library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-module library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-module library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-module library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-module library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-module library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-module library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-module library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-module library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-module library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-module library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-module library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),module.exports.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-module library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-module library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-module library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};(()=>{var t,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),module.exports.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-module library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-module library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-module library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_4618d8f04314a0c07b24.js": "console.log(\\"Hello world!\\"),module.exports.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-module library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-module library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-module library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_215ebada3ff1a04863f1.js": "(()=>{var e={};(()=>{var t,r=document.getElementsByTagName(\\"script\\"),a=/main_215ebada3ff1a04863f1\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),module.exports.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-module library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-module library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-static library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	Object.defineProperty((exports.MyLibrary = exports.MyLibrary || {}), \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-static library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-static library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-static library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	Object.defineProperty((exports.MyLibrary = exports.MyLibrary || {}), \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-static library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-static library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-static library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	Object.defineProperty((exports.MyLibrary = exports.MyLibrary || {}), \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-static library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-static library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-static library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	Object.defineProperty((exports.MyLibrary = exports.MyLibrary || {}), \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-static library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-static library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-static library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),Object.defineProperty(exports.MyLibrary=exports.MyLibrary||{},\\"__esModule\\",{value:!0});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-static library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-static library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-static library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};(()=>{var r,t=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(t&&t.length)for(var i=0;i<t.length;i++)if(t[i]){var s=t[i].getAttribute(\\"src\\");if(s&&s.match(a)){r=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=r})(),console.log(e.p),Object.defineProperty(exports.MyLibrary=exports.MyLibrary||{},\\"__esModule\\",{value:!0})})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-static library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-static library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-static library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_fdc7b1aa4223e178b616.js": "console.log(\\"Hello world!\\"),Object.defineProperty(exports.MyLibrary=exports.MyLibrary||{},\\"__esModule\\",{value:!0});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-static library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-static library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-static library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_7f615e94560b668d69b0.js": "(()=>{var e={};(()=>{var r,a=document.getElementsByTagName(\\"script\\"),t=/main_7f615e94560b668d69b0\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var s=a[i].getAttribute(\\"src\\");if(s&&s.match(t)){r=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=r})(),console.log(e.p),Object.defineProperty(exports.MyLibrary=exports.MyLibrary||{},\\"__esModule\\",{value:!0})})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-static library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs-static library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs2 library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs2 library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs2 library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs2 library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs2 library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs2 library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs2 library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs2 library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs2 library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs2 library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs2 library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs2 library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs2 library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),module.exports.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs2 library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs2 library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs2 library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};(()=>{var t,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),module.exports.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs2 library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs2 library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs2 library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_4618d8f04314a0c07b24.js": "console.log(\\"Hello world!\\"),module.exports.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs2 library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs2 library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs2 library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_215ebada3ff1a04863f1.js": "(()=>{var e={};(()=>{var t,r=document.getElementsByTagName(\\"script\\"),a=/main_215ebada3ff1a04863f1\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),module.exports.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs2 library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles commonjs2 library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles global library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles global library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles global library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles global library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles global library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles global library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles global library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles global library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles global library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles global library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles global library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles global library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles global library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),self.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles global library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles global library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles global library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};(()=>{var t,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),self.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles global library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles global library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles global library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_7d39ca5328225a0694e5.js": "console.log(\\"Hello world!\\"),self.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles global library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles global library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles global library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_8cd12c1b85d952bb65f6.js": "(()=>{var e={};(()=>{var t,a=document.getElementsByTagName(\\"script\\"),r=/main_8cd12c1b85d952bb65f6\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var s=a[i].getAttribute(\\"src\\");if(s&&s.match(r)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),self.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles global library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles global library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles jsonp library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
MyLibrary(/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
);",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles jsonp library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles jsonp library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles jsonp library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
MyLibrary(/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
);",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles jsonp library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles jsonp library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles jsonp library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
MyLibrary(/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
);",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles jsonp library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles jsonp library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles jsonp library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
MyLibrary(/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
);",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles jsonp library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles jsonp library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles jsonp library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "MyLibrary((console.log(\\"Hello world!\\"),{}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles jsonp library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles jsonp library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles jsonp library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "MyLibrary((()=>{var r={};return(()=>{var t,e=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(e&&e.length)for(var i=0;i<e.length;i++)if(e[i]){var n=e[i].getAttribute(\\"src\\");if(n&&n.match(a)){t=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}r.p=t})(),console.log(r.p),{}})());",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles jsonp library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles jsonp library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles jsonp library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_f119a2e1669e0baf47d0.js": "MyLibrary((console.log(\\"Hello world!\\"),{}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles jsonp library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles jsonp library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles jsonp library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_d62c4a558867b9317512.js": "MyLibrary((()=>{var r={};return(()=>{var t,a=document.getElementsByTagName(\\"script\\"),e=/main_d62c4a558867b9317512\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var n=a[i].getAttribute(\\"src\\");if(n&&n.match(e)){t=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}r.p=t})(),console.log(r.p),{}})());",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles jsonp library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles jsonp library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles self library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles self library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles self library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles self library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles self library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles self library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles self library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles self library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles self library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles self library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles self library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles self library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles self library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),self.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles self library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles self library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles self library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};(()=>{var t,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),self.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles self library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles self library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles self library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_7d39ca5328225a0694e5.js": "console.log(\\"Hello world!\\"),self.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles self library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles self library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles self library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_8cd12c1b85d952bb65f6.js": "(()=>{var e={};(()=>{var t,a=document.getElementsByTagName(\\"script\\"),r=/main_8cd12c1b85d952bb65f6\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var s=a[i].getAttribute(\\"src\\");if(s&&s.match(r)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),self.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles self library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles self library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles system library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
System.register(\\"MyLibrary\\", [], function(__WEBPACK_DYNAMIC_EXPORT__, __system_context__) {


	return {

		execute: function() {
			__WEBPACK_DYNAMIC_EXPORT__(
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()

			);
		}
	};
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles system library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles system library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles system library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
System.register(\\"MyLibrary\\", [], function(__WEBPACK_DYNAMIC_EXPORT__, __system_context__) {


	return {

		execute: function() {
			__WEBPACK_DYNAMIC_EXPORT__(
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()

			);
		}
	};
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles system library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles system library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles system library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
System.register(\\"MyLibrary\\", [], function(__WEBPACK_DYNAMIC_EXPORT__, __system_context__) {


	return {

		execute: function() {
			__WEBPACK_DYNAMIC_EXPORT__(
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()

			);
		}
	};
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles system library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles system library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles system library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
System.register(\\"MyLibrary\\", [], function(__WEBPACK_DYNAMIC_EXPORT__, __system_context__) {


	return {

		execute: function() {
			__WEBPACK_DYNAMIC_EXPORT__(
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()

			);
		}
	};
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles system library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles system library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles system library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "System.register(\\"MyLibrary\\",[],(function(e,o){return{execute:function(){e((console.log(\\"Hello world!\\"),{}))}}}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles system library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles system library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles system library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "System.register(\\"MyLibrary\\",[],(function(e,t){return{execute:function(){var t;e((t={},(()=>{var e,r=document.getElementsByTagName(\\"script\\"),n=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var a=r[i].getAttribute(\\"src\\");if(a&&a.match(n)){e=a.substring(0,a.lastIndexOf(\\"/\\")+1);break}}t.p=e})(),console.log(t.p),{}))}}}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles system library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles system library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles system library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_7d81fbd36473e27aa0fb.js": "System.register(\\"MyLibrary\\",[],(function(e,o){return{execute:function(){e((console.log(\\"Hello world!\\"),{}))}}}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles system library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles system library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles system library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_b258ae75091c8f8b8490.js": "System.register(\\"MyLibrary\\",[],(function(e,t){return{execute:function(){var t;e((t={},(()=>{var e,r=document.getElementsByTagName(\\"script\\"),a=/main_b258ae75091c8f8b8490\\\\.js/i;if(r&&r.length)for(var n=0;n<r.length;n++)if(r[n]){var i=r[n].getAttribute(\\"src\\");if(i&&i.match(a)){e=i.substring(0,i.lastIndexOf(\\"/\\")+1);break}}t.p=e})(),console.log(t.p),{}))}}}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles system library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles system library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles this library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	this.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles this library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles this library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles this library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	this.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles this library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles this library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles this library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	this.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles this library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles this library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles this library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	this.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles this library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles this library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles this library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{console.log(\\"Hello world!\\"),this.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles this library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles this library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles this library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var t={};(()=>{var e,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){e=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}t.p=e})(),console.log(t.p),this.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles this library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles this library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles this library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_4d6fb5abdd3eb7fe4115.js": "(()=>{console.log(\\"Hello world!\\"),this.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles this library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles this library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles this library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_db75e39898539074e63f.js": "(()=>{var e={};(()=>{var t,a=document.getElementsByTagName(\\"script\\"),r=/main_db75e39898539074e63f\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var s=a[i].getAttribute(\\"src\\");if(s&&s.match(r)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),this.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles this library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles this library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "!function(e,o){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=o():\\"function\\"==typeof define&&define.amd?define([],o):\\"object\\"==typeof exports?exports.MyLibrary=o():e.MyLibrary=o()}(self,(()=>(console.log(\\"Hello world!\\"),{})));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "!function(e,t){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=t():\\"function\\"==typeof define&&define.amd?define([],t):\\"object\\"==typeof exports?exports.MyLibrary=t():e.MyLibrary=t()}(self,(()=>{return e={},(()=>{var t,o=document.getElementsByTagName(\\"script\\"),r=/main\\\\.js/i;if(o&&o.length)for(var n=0;n<o.length;n++)if(o[n]){var f=o[n].getAttribute(\\"src\\");if(f&&f.match(r)){t=f.substring(0,f.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),{};var e}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_8c43c348dc21118df193.js": "!function(e,o){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=o():\\"function\\"==typeof define&&define.amd?define([],o):\\"object\\"==typeof exports?exports.MyLibrary=o():e.MyLibrary=o()}(self,(()=>(console.log(\\"Hello world!\\"),{})));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_cf828947bceb5d39f0a1.js": "!function(e,t){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=t():\\"function\\"==typeof define&&define.amd?define([],t):\\"object\\"==typeof exports?exports.MyLibrary=t():e.MyLibrary=t()}(self,(()=>{return e={},(()=>{var t,o=document.getElementsByTagName(\\"script\\"),r=/main_cf828947bceb5d39f0a1\\\\.js/i;if(o&&o.length)for(var f=0;f<o.length;f++)if(o[f]){var n=o[f].getAttribute(\\"src\\");if(n&&n.match(r)){t=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),{};var e}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd2 library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd2 library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd2 library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd2 library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd2 library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd2 library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd2 library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd2 library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd2 library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd2 library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd2 library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd2 library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd2 library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "!function(e,o){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=o():\\"function\\"==typeof define&&define.amd?define([],o):\\"object\\"==typeof exports?exports.MyLibrary=o():e.MyLibrary=o()}(self,(()=>(console.log(\\"Hello world!\\"),{})));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd2 library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd2 library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd2 library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "!function(e,t){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=t():\\"function\\"==typeof define&&define.amd?define([],t):\\"object\\"==typeof exports?exports.MyLibrary=t():e.MyLibrary=t()}(self,(()=>{return e={},(()=>{var t,o=document.getElementsByTagName(\\"script\\"),r=/main\\\\.js/i;if(o&&o.length)for(var n=0;n<o.length;n++)if(o[n]){var f=o[n].getAttribute(\\"src\\");if(f&&f.match(r)){t=f.substring(0,f.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),{};var e}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd2 library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd2 library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd2 library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_8c43c348dc21118df193.js": "!function(e,o){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=o():\\"function\\"==typeof define&&define.amd?define([],o):\\"object\\"==typeof exports?exports.MyLibrary=o():e.MyLibrary=o()}(self,(()=>(console.log(\\"Hello world!\\"),{})));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd2 library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd2 library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd2 library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_cf828947bceb5d39f0a1.js": "!function(e,t){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=t():\\"function\\"==typeof define&&define.amd?define([],t):\\"object\\"==typeof exports?exports.MyLibrary=t():e.MyLibrary=t()}(self,(()=>{return e={},(()=>{var t,o=document.getElementsByTagName(\\"script\\"),r=/main_cf828947bceb5d39f0a1\\\\.js/i;if(o&&o.length)for(var f=0;f<o.length;f++)if(o[f]){var n=o[f].getAttribute(\\"src\\");if(n&&n.match(r)){t=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),{};var e}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd2 library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles umd2 library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles var library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
var MyLibrary;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles var library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles var library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles var library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
var MyLibrary;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles var library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles var library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles var library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
var MyLibrary;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles var library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles var library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles var library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
var MyLibrary;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles var library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles var library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles var library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "var MyLibrary;console.log(\\"Hello world!\\"),MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles var library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles var library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles var library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "var MyLibrary;(()=>{var r={};(()=>{var a,t=document.getElementsByTagName(\\"script\\"),e=/main\\\\.js/i;if(t&&t.length)for(var i=0;i<t.length;i++)if(t[i]){var n=t[i].getAttribute(\\"src\\");if(n&&n.match(e)){a=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}r.p=a})(),console.log(r.p),MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles var library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles var library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles var library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_cdf966d89dde9e0e6511.js": "var MyLibrary;console.log(\\"Hello world!\\"),MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles var library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles var library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles var library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_6a43fdec20033b6103e3.js": "var MyLibrary;(()=>{var a={};(()=>{var r,e=document.getElementsByTagName(\\"script\\"),t=/main_6a43fdec20033b6103e3\\\\.js/i;if(e&&e.length)for(var i=0;i<e.length;i++)if(e[i]){var n=e[i].getAttribute(\\"src\\");if(n&&n.match(t)){r=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}a.p=r})(),console.log(a.p),MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles var library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles var library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles window library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	window.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles window library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles window library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles window library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	window.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles window library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles window library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles window library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	window.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles window library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles window library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles window library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	window.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles window library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles window library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles window library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),window.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles window library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles window library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles window library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var t={};(()=>{var e,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var n=r[i].getAttribute(\\"src\\");if(n&&n.match(a)){e=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}t.p=e})(),console.log(t.p),window.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles window library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles window library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles window library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_5e7a9248e729d9296340.js": "console.log(\\"Hello world!\\"),window.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles window library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles window library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles window library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_45661b5c41db58a7c856.js": "(()=>{var e={};(()=>{var a,t=document.getElementsByTagName(\\"script\\"),r=/main_45661b5c41db58a7c856\\\\.js/i;if(t&&t.length)for(var i=0;i<t.length;i++)if(t[i]){var n=t[i].getAttribute(\\"src\\");if(n&&n.match(r)){a=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=a})(),console.log(e.p),window.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles window library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true},"regexVariable":"REGEXP_VAR"}}) Handles window library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles amd library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
define(\\"MyLibrary\\", [], () => { return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles amd library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles amd library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles amd library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
define(\\"MyLibrary\\", [], () => { return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles amd library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles amd library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles amd library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
define(\\"MyLibrary\\", [], () => { return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles amd library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles amd library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles amd library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
define(\\"MyLibrary\\", [], () => { return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles amd library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles amd library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles amd library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "define(\\"MyLibrary\\",[],(()=>(console.log(\\"Hello world!\\"),{})));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles amd library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles amd library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles amd library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "define(\\"MyLibrary\\",[],(()=>{return e={},(()=>{var r,t=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(t&&t.length)for(var i=0;i<t.length;i++)if(t[i]){var n=t[i].getAttribute(\\"src\\");if(n&&n.match(a)){r=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=r})(),console.log(e.p),{};var e}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles amd library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles amd library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles amd library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_deed8afe870a5fe703ae.js": "define(\\"MyLibrary\\",[],(()=>(console.log(\\"Hello world!\\"),{})));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles amd library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles amd library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles amd library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_a96c22591ae020f988e2.js": "define(\\"MyLibrary\\",[],(()=>{return e={},(()=>{var a,r=document.getElementsByTagName(\\"script\\"),t=/main_a96c22591ae020f988e2\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var n=r[i].getAttribute(\\"src\\");if(n&&n.match(t)){a=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=a})(),console.log(e.p),{};var e}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles amd library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles amd library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var t={};(()=>{var e,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var n=r[i].getAttribute(\\"src\\");if(n&&n.match(a)){e=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}t.p=e})(),console.log(t.p),MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_edcf84f77954338454ea.js": "console.log(\\"Hello world!\\"),MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_0926637b4ac11d8978ba.js": "(()=>{var a={};(()=>{var t,e=document.getElementsByTagName(\\"script\\"),r=/main_0926637b4ac11d8978ba\\\\.js/i;if(e&&e.length)for(var i=0;i<e.length;i++)if(e[i]){var n=e[i].getAttribute(\\"src\\");if(n&&n.match(r)){t=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}a.p=t})(),console.log(a.p),MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign-properties library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	var __webpack_export_target__ = (MyLibrary = typeof MyLibrary === \\"undefined\\" ? {} : MyLibrary);
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign-properties library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign-properties library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign-properties library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	var __webpack_export_target__ = (MyLibrary = typeof MyLibrary === \\"undefined\\" ? {} : MyLibrary);
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign-properties library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign-properties library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign-properties library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	var __webpack_export_target__ = (MyLibrary = typeof MyLibrary === \\"undefined\\" ? {} : MyLibrary);
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign-properties library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign-properties library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign-properties library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	var __webpack_export_target__ = (MyLibrary = typeof MyLibrary === \\"undefined\\" ? {} : MyLibrary);
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign-properties library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign-properties library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign-properties library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};console.log(\\"Hello world!\\");var r=MyLibrary=\\"undefined\\"==typeof MyLibrary?{}:MyLibrary;for(var o in e)r[o]=e[o];e.__esModule&&Object.defineProperty(r,\\"__esModule\\",{value:!0})})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign-properties library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign-properties library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign-properties library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};(()=>{var r,a=document.getElementsByTagName(\\"script\\"),t=/main\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var n=a[i].getAttribute(\\"src\\");if(n&&n.match(t)){r=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=r})();var r={};console.log(e.p);var a=MyLibrary=\\"undefined\\"==typeof MyLibrary?{}:MyLibrary;for(var t in r)a[t]=r[t];r.__esModule&&Object.defineProperty(a,\\"__esModule\\",{value:!0})})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign-properties library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign-properties library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign-properties library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_c46fa6e9dce17d2b90d4.js": "(()=>{var e={};console.log(\\"Hello world!\\");var r=MyLibrary=\\"undefined\\"==typeof MyLibrary?{}:MyLibrary;for(var o in e)r[o]=e[o];e.__esModule&&Object.defineProperty(r,\\"__esModule\\",{value:!0})})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign-properties library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign-properties library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign-properties library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_0a683184f3afcbf97c6c.js": "(()=>{var e={};(()=>{var r,a=document.getElementsByTagName(\\"script\\"),t=/main_0a683184f3afcbf97c6c\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var n=a[i].getAttribute(\\"src\\");if(n&&n.match(t)){r=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=r})();var r={};console.log(e.p);var a=MyLibrary=\\"undefined\\"==typeof MyLibrary?{}:MyLibrary;for(var t in r)a[t]=r[t];r.__esModule&&Object.defineProperty(a,\\"__esModule\\",{value:!0})})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign-properties library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles assign-properties library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),exports.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var t={};(()=>{var e,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){e=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}t.p=e})(),console.log(t.p),exports.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_a61d0ddd7fbc122d026c.js": "console.log(\\"Hello world!\\"),exports.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_be77d75ccbe921238d90.js": "(()=>{var a={};(()=>{var t,e=document.getElementsByTagName(\\"script\\"),r=/main_be77d75ccbe921238d90\\\\.js/i;if(e&&e.length)for(var i=0;i<e.length;i++)if(e[i]){var s=e[i].getAttribute(\\"src\\");if(s&&s.match(r)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}a.p=t})(),console.log(a.p),exports.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-module library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-module library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-module library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-module library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-module library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-module library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-module library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-module library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-module library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-module library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-module library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-module library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-module library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),module.exports.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-module library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-module library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-module library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};(()=>{var t,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),module.exports.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-module library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-module library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-module library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_4618d8f04314a0c07b24.js": "console.log(\\"Hello world!\\"),module.exports.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-module library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-module library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-module library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_215ebada3ff1a04863f1.js": "(()=>{var e={};(()=>{var t,r=document.getElementsByTagName(\\"script\\"),a=/main_215ebada3ff1a04863f1\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),module.exports.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-module library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-module library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-static library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	Object.defineProperty((exports.MyLibrary = exports.MyLibrary || {}), \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-static library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-static library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-static library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	Object.defineProperty((exports.MyLibrary = exports.MyLibrary || {}), \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-static library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-static library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-static library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	Object.defineProperty((exports.MyLibrary = exports.MyLibrary || {}), \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-static library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-static library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-static library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	Object.defineProperty((exports.MyLibrary = exports.MyLibrary || {}), \\"__esModule\\", { value: true });
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-static library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-static library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-static library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),Object.defineProperty(exports.MyLibrary=exports.MyLibrary||{},\\"__esModule\\",{value:!0});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-static library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-static library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-static library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};(()=>{var r,t=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(t&&t.length)for(var i=0;i<t.length;i++)if(t[i]){var s=t[i].getAttribute(\\"src\\");if(s&&s.match(a)){r=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=r})(),console.log(e.p),Object.defineProperty(exports.MyLibrary=exports.MyLibrary||{},\\"__esModule\\",{value:!0})})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-static library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-static library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-static library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_fdc7b1aa4223e178b616.js": "console.log(\\"Hello world!\\"),Object.defineProperty(exports.MyLibrary=exports.MyLibrary||{},\\"__esModule\\",{value:!0});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-static library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-static library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-static library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_7f615e94560b668d69b0.js": "(()=>{var e={};(()=>{var r,a=document.getElementsByTagName(\\"script\\"),t=/main_7f615e94560b668d69b0\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var s=a[i].getAttribute(\\"src\\");if(s&&s.match(t)){r=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=r})(),console.log(e.p),Object.defineProperty(exports.MyLibrary=exports.MyLibrary||{},\\"__esModule\\",{value:!0})})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-static library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs-static library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs2 library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs2 library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs2 library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs2 library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs2 library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs2 library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs2 library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs2 library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs2 library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs2 library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	module.exports.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs2 library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs2 library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs2 library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),module.exports.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs2 library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs2 library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs2 library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};(()=>{var t,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),module.exports.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs2 library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs2 library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs2 library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_4618d8f04314a0c07b24.js": "console.log(\\"Hello world!\\"),module.exports.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs2 library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs2 library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs2 library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_215ebada3ff1a04863f1.js": "(()=>{var e={};(()=>{var t,r=document.getElementsByTagName(\\"script\\"),a=/main_215ebada3ff1a04863f1\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),module.exports.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs2 library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles commonjs2 library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles global library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles global library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles global library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles global library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles global library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles global library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles global library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles global library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles global library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles global library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles global library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles global library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles global library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),self.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles global library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles global library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles global library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};(()=>{var t,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),self.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles global library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles global library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles global library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_7d39ca5328225a0694e5.js": "console.log(\\"Hello world!\\"),self.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles global library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles global library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles global library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_8cd12c1b85d952bb65f6.js": "(()=>{var e={};(()=>{var t,a=document.getElementsByTagName(\\"script\\"),r=/main_8cd12c1b85d952bb65f6\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var s=a[i].getAttribute(\\"src\\");if(s&&s.match(r)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),self.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles global library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles global library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles jsonp library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
MyLibrary(/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
);",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles jsonp library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles jsonp library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles jsonp library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
MyLibrary(/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
);",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles jsonp library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles jsonp library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles jsonp library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
MyLibrary(/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
);",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles jsonp library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles jsonp library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles jsonp library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
MyLibrary(/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
);",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles jsonp library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles jsonp library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles jsonp library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "MyLibrary((console.log(\\"Hello world!\\"),{}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles jsonp library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles jsonp library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles jsonp library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "MyLibrary((()=>{var r={};return(()=>{var t,e=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(e&&e.length)for(var i=0;i<e.length;i++)if(e[i]){var n=e[i].getAttribute(\\"src\\");if(n&&n.match(a)){t=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}r.p=t})(),console.log(r.p),{}})());",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles jsonp library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles jsonp library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles jsonp library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_f119a2e1669e0baf47d0.js": "MyLibrary((console.log(\\"Hello world!\\"),{}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles jsonp library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles jsonp library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles jsonp library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_d62c4a558867b9317512.js": "MyLibrary((()=>{var r={};return(()=>{var t,a=document.getElementsByTagName(\\"script\\"),e=/main_d62c4a558867b9317512\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var n=a[i].getAttribute(\\"src\\");if(n&&n.match(e)){t=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}r.p=t})(),console.log(r.p),{}})());",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles jsonp library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles jsonp library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles self library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles self library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles self library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles self library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles self library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles self library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles self library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles self library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles self library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles self library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	self.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles self library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles self library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles self library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),self.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles self library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles self library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles self library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var e={};(()=>{var t,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),self.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles self library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles self library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles self library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_7d39ca5328225a0694e5.js": "console.log(\\"Hello world!\\"),self.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles self library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles self library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles self library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_8cd12c1b85d952bb65f6.js": "(()=>{var e={};(()=>{var t,a=document.getElementsByTagName(\\"script\\"),r=/main_8cd12c1b85d952bb65f6\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var s=a[i].getAttribute(\\"src\\");if(s&&s.match(r)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),self.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles self library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles self library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles system library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
System.register(\\"MyLibrary\\", [], function(__WEBPACK_DYNAMIC_EXPORT__, __system_context__) {


	return {

		execute: function() {
			__WEBPACK_DYNAMIC_EXPORT__(
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()

			);
		}
	};
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles system library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles system library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles system library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
System.register(\\"MyLibrary\\", [], function(__WEBPACK_DYNAMIC_EXPORT__, __system_context__) {


	return {

		execute: function() {
			__WEBPACK_DYNAMIC_EXPORT__(
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()

			);
		}
	};
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles system library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles system library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles system library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
System.register(\\"MyLibrary\\", [], function(__WEBPACK_DYNAMIC_EXPORT__, __system_context__) {


	return {

		execute: function() {
			__WEBPACK_DYNAMIC_EXPORT__(
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()

			);
		}
	};
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles system library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles system library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles system library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
System.register(\\"MyLibrary\\", [], function(__WEBPACK_DYNAMIC_EXPORT__, __system_context__) {


	return {

		execute: function() {
			__WEBPACK_DYNAMIC_EXPORT__(
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()

			);
		}
	};
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles system library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles system library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles system library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "System.register(\\"MyLibrary\\",[],(function(e,o){return{execute:function(){e((console.log(\\"Hello world!\\"),{}))}}}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles system library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles system library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles system library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "System.register(\\"MyLibrary\\",[],(function(e,t){return{execute:function(){var t;e((t={},(()=>{var e,r=document.getElementsByTagName(\\"script\\"),n=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var a=r[i].getAttribute(\\"src\\");if(a&&a.match(n)){e=a.substring(0,a.lastIndexOf(\\"/\\")+1);break}}t.p=e})(),console.log(t.p),{}))}}}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles system library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles system library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles system library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_7d81fbd36473e27aa0fb.js": "System.register(\\"MyLibrary\\",[],(function(e,o){return{execute:function(){e((console.log(\\"Hello world!\\"),{}))}}}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles system library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles system library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles system library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_b258ae75091c8f8b8490.js": "System.register(\\"MyLibrary\\",[],(function(e,t){return{execute:function(){var t;e((t={},(()=>{var e,r=document.getElementsByTagName(\\"script\\"),a=/main_b258ae75091c8f8b8490\\\\.js/i;if(r&&r.length)for(var n=0;n<r.length;n++)if(r[n]){var i=r[n].getAttribute(\\"src\\");if(i&&i.match(a)){e=i.substring(0,i.lastIndexOf(\\"/\\")+1);break}}t.p=e})(),console.log(t.p),{}))}}}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles system library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles system library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles this library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	this.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles this library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles this library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles this library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	this.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles this library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles this library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles this library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	this.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles this library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles this library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles this library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	this.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles this library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles this library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles this library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{console.log(\\"Hello world!\\"),this.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles this library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles this library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles this library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var t={};(()=>{var e,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var s=r[i].getAttribute(\\"src\\");if(s&&s.match(a)){e=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}t.p=e})(),console.log(t.p),this.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles this library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles this library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles this library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_4d6fb5abdd3eb7fe4115.js": "(()=>{console.log(\\"Hello world!\\"),this.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles this library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles this library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles this library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_db75e39898539074e63f.js": "(()=>{var e={};(()=>{var t,a=document.getElementsByTagName(\\"script\\"),r=/main_db75e39898539074e63f\\\\.js/i;if(a&&a.length)for(var i=0;i<a.length;i++)if(a[i]){var s=a[i].getAttribute(\\"src\\");if(s&&s.match(r)){t=s.substring(0,s.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),this.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles this library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles this library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "!function(e,o){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=o():\\"function\\"==typeof define&&define.amd?define([],o):\\"object\\"==typeof exports?exports.MyLibrary=o():e.MyLibrary=o()}(self,(()=>(console.log(\\"Hello world!\\"),{})));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "!function(e,t){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=t():\\"function\\"==typeof define&&define.amd?define([],t):\\"object\\"==typeof exports?exports.MyLibrary=t():e.MyLibrary=t()}(self,(()=>{return e={},(()=>{var t,o=document.getElementsByTagName(\\"script\\"),r=/main\\\\.js/i;if(o&&o.length)for(var n=0;n<o.length;n++)if(o[n]){var f=o[n].getAttribute(\\"src\\");if(f&&f.match(r)){t=f.substring(0,f.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),{};var e}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_8c43c348dc21118df193.js": "!function(e,o){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=o():\\"function\\"==typeof define&&define.amd?define([],o):\\"object\\"==typeof exports?exports.MyLibrary=o():e.MyLibrary=o()}(self,(()=>(console.log(\\"Hello world!\\"),{})));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_cf828947bceb5d39f0a1.js": "!function(e,t){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=t():\\"function\\"==typeof define&&define.amd?define([],t):\\"object\\"==typeof exports?exports.MyLibrary=t():e.MyLibrary=t()}(self,(()=>{return e={},(()=>{var t,o=document.getElementsByTagName(\\"script\\"),r=/main_cf828947bceb5d39f0a1\\\\.js/i;if(o&&o.length)for(var f=0;f<o.length;f++)if(o[f]){var n=o[f].getAttribute(\\"src\\");if(n&&n.match(r)){t=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),{};var e}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd2 library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd2 library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd2 library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd2 library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd2 library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd2 library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd2 library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd2 library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd2 library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd2 library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports[\\"MyLibrary\\"] = factory();
	else
		root[\\"MyLibrary\\"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd2 library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd2 library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd2 library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "!function(e,o){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=o():\\"function\\"==typeof define&&define.amd?define([],o):\\"object\\"==typeof exports?exports.MyLibrary=o():e.MyLibrary=o()}(self,(()=>(console.log(\\"Hello world!\\"),{})));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd2 library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd2 library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd2 library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "!function(e,t){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=t():\\"function\\"==typeof define&&define.amd?define([],t):\\"object\\"==typeof exports?exports.MyLibrary=t():e.MyLibrary=t()}(self,(()=>{return e={},(()=>{var t,o=document.getElementsByTagName(\\"script\\"),r=/main\\\\.js/i;if(o&&o.length)for(var n=0;n<o.length;n++)if(o[n]){var f=o[n].getAttribute(\\"src\\");if(f&&f.match(r)){t=f.substring(0,f.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),{};var e}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd2 library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd2 library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd2 library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_8c43c348dc21118df193.js": "!function(e,o){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=o():\\"function\\"==typeof define&&define.amd?define([],o):\\"object\\"==typeof exports?exports.MyLibrary=o():e.MyLibrary=o()}(self,(()=>(console.log(\\"Hello world!\\"),{})));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd2 library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd2 library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd2 library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_cf828947bceb5d39f0a1.js": "!function(e,t){\\"object\\"==typeof exports&&\\"object\\"==typeof module?module.exports=t():\\"function\\"==typeof define&&define.amd?define([],t):\\"object\\"==typeof exports?exports.MyLibrary=t():e.MyLibrary=t()}(self,(()=>{return e={},(()=>{var t,o=document.getElementsByTagName(\\"script\\"),r=/main_cf828947bceb5d39f0a1\\\\.js/i;if(o&&o.length)for(var f=0;f<o.length;f++)if(o[f]){var n=o[f].getAttribute(\\"src\\");if(n&&n.match(r)){t=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=t})(),console.log(e.p),{};var e}));",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd2 library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles umd2 library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles var library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
var MyLibrary;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles var library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles var library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles var library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
var MyLibrary;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles var library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles var library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles var library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
var MyLibrary;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles var library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles var library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles var library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
var MyLibrary;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles var library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles var library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles var library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "var MyLibrary;console.log(\\"Hello world!\\"),MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles var library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles var library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles var library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "var MyLibrary;(()=>{var r={};(()=>{var a,t=document.getElementsByTagName(\\"script\\"),e=/main\\\\.js/i;if(t&&t.length)for(var i=0;i<t.length;i++)if(t[i]){var n=t[i].getAttribute(\\"src\\");if(n&&n.match(e)){a=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}r.p=a})(),console.log(r.p),MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles var library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles var library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles var library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_cdf966d89dde9e0e6511.js": "var MyLibrary;console.log(\\"Hello world!\\"),MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles var library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles var library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles var library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_6a43fdec20033b6103e3.js": "var MyLibrary;(()=>{var a={};(()=>{var r,e=document.getElementsByTagName(\\"script\\"),t=/main_6a43fdec20033b6103e3\\\\.js/i;if(e&&e.length)for(var i=0;i<e.length;i++)if(e[i]){var n=e[i].getAttribute(\\"src\\");if(n&&n.match(t)){r=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}a.p=r})(),console.log(a.p),MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles var library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles var library output (production+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles window library output (development) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	window.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles window library output (development) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles window library output (development) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles window library output (development) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	window.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles window library output (development) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles window library output (development) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles window library output (development+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ (() => {

eval(\\"console.log(\\\\\\"Hello world!\\\\\\");\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"]();
/******/ 	window.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles window library output (development+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles window library output (development+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles window library output (development+hash) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "/*
 * ATTENTION: The \\"eval\\" devtool has been used (maybe by default in mode: \\"development\\").
 * This devtool is neither made for production nor for readable output files.
 * It uses \\"eval()\\" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with \\"devtool: false\\".
 * If you are looking for production-ready output files, see mode: \\"production\\" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ \\"../../../../../../entry.js\\":
/*!**********************************!*\\\\
  !*** ../../../../../../entry.js ***!
  \\\\**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(\\"console.log(__webpack_require__.p);\\\\n\\\\n//# sourceURL=webpack://MyLibrary/../../../../../../entry.js?\\");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scripts = document.getElementsByTagName('script');
/******/ 		var regex = /main\\\\.js/i;
/******/ 		var publicPath;
/******/ 		
/******/ 		if (scripts && scripts.length) {
/******/ 		  for (var i = 0; i < scripts.length; i++) {
/******/ 		    if (!scripts[i]) continue;
/******/ 		    var path = scripts[i].getAttribute('src');
/******/ 		    if (path && path.match(regex)) {
/******/ 		      publicPath = path.substring(0, path.lastIndexOf('/') + 1);
/******/ 		      break;
/******/ 		    }
/******/ 		  }
/******/ 		}
/******/ 		
/******/ 		__webpack_require__.p = publicPath;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[\\"../../../../../../entry.js\\"](0, __webpack_exports__, __webpack_require__);
/******/ 	window.MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles window library output (development+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles window library output (development+hash) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles window library output (production) (doesn't use public path): Content 1`] = `
Object {
  "/release/main.js": "console.log(\\"Hello world!\\"),window.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles window library output (production) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles window library output (production) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles window library output (production) (uses public path): Content 1`] = `
Object {
  "/release/main.js": "(()=>{var t={};(()=>{var e,r=document.getElementsByTagName(\\"script\\"),a=/main\\\\.js/i;if(r&&r.length)for(var i=0;i<r.length;i++)if(r[i]){var n=r[i].getAttribute(\\"src\\");if(n&&n.match(a)){e=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}t.p=e})(),console.log(t.p),window.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles window library output (production) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles window library output (production) (uses public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles window library output (production+hash) (doesn't use public path): Content 1`] = `
Object {
  "/release/main_5e7a9248e729d9296340.js": "console.log(\\"Hello world!\\"),window.MyLibrary={};",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles window library output (production+hash) (doesn't use public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles window library output (production+hash) (doesn't use public path): Warnings 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles window library output (production+hash) (uses public path): Content 1`] = `
Object {
  "/release/main_45661b5c41db58a7c856.js": "(()=>{var e={};(()=>{var a,t=document.getElementsByTagName(\\"script\\"),r=/main_45661b5c41db58a7c856\\\\.js/i;if(t&&t.length)for(var i=0;i<t.length;i++)if(t[i]){var n=t[i].getAttribute(\\"src\\");if(n&&n.match(r)){a=n.substring(0,n.lastIndexOf(\\"/\\")+1);break}}e.p=a})(),console.log(e.p),window.MyLibrary={}})();",
}
`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles window library output (production+hash) (uses public path): Errors 1`] = `Array []`;

exports[`SetPublicPathPlugin (with {"scriptName":{"useAssetName":true}}}) Handles window library output (production+hash) (uses public path): Warnings 1`] = `Array []`;
